@layout EmptyLayout
@page "/KotUpdate/{KotNo:int}"
@inject IDailyTableDetailService DailyTableDetailService
@inject ITableNameService TableNameService
@inject NavigationManager NavigationManager

<PageTitle>KOT-Wise Update</PageTitle>

<h3>KOT-Wise Update</h3>
<EditForm Model="DailyTableDetailService.DailyTableDetails" OnSubmit="HandleSubmit">
    <div class="col-12">
        <table class="table table-bordered border-primary table-sm table-striped table-hover">
            <thead style="background-color:blueviolet; color: white;">
                <tr style="text-align:center">
                    <th colspan="3">
                        Table :@TableNameService.TableNames.FirstOrDefault(temp=>temp.TableId == DailyTableDetailService.DailyTableDetails.Select(temp=>temp.TableNo).FirstOrDefault())?.TableName1
                    </th>
                    <th colspan="4">
                        KOT :  @DailyTableDetailService.DailyTableDetails.Select(temp=>temp.KotNo).FirstOrDefault()
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr style="text-align:center; font-weight:bold; background-color:lightblue">
                    <td style="display:none">Row ID</td>
                    <td>Item Name</td>
                    <td>Qty</td>
                    <td>Pending</td>
                    <td>Delivered</td>
                    <td>Cooking</td>
                    <td>Ready</td>                  
                    <td>Cancel</td>
                </tr>

                @foreach (var item in DailyTableDetailService.DailyTableDetails.Where(temp=>temp.Kotbot=="K"))
                {
                    <tr style="align-content:center">
                        <td style="display:none">@item.DailyTableDetailId</td>
                        <td>@item.itemMaster?.ItemName</td>
                        <td> <input  readonly @bind-value=item.Order class="form-control" style="border:1px solid black; border-radius:5px; padding-left:0px; padding-right:0px" /></td>
                        <td> <input  readonly @bind-value=item.Pending class="form-control" style="border:1px solid black; border-radius:5px; " /></td>
                        <td> <input type="number" @bind-value=item.Delivered class="form-control" style="border:1px solid black; border-radius:5px; " /></td>
                        <td> <input type="number" @bind-value=item.Cooking class="form-control" style="border:1px solid black; border-radius:5px; " /></td>
                        <td> <input type="number" @bind-value=item.Ready class ="form-control" style="border:1px solid black; border-radius:5px;" /></td>
                        <td> <input type="number" @bind-value=item.Cancel class="form-control" style="border:1px solid black; border-radius:5px; " /></td>
                    </tr>
                }
                
              @*   <tr>
                    <td colspan="3">
                        Status
                    </td>
                    <td colspan="3">
                        <select class="form-select" style="border:1px solid black">
                            <option>Delivered</option>
                            <option>Pending</option>
                            <option>Ready</option>
                        </select>
                    </td>
                </tr> *@

                <tr>
                    <td colspan="7" style="text-align:center">
                        <button type="submit" class="btn btn-primary" style="background-color:blueviolet">Save</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</EditForm>



@code {

    [Parameter]
    public int KotNo { get; set; }

    private HubConnection? hubConnection;

    protected override async Task OnParametersSetAsync()
    {
        await DailyTableDetailService.GetByKotNo(KotNo);
    }

    async Task HandleSubmit()
    {
        foreach (var item in DailyTableDetailService.DailyTableDetails)
        {
            await DailyTableDetailService.Update(item);
        }    
        

        if (IsConnected)
            await SendMessage();

        NavigationManager.NavigateTo("SupervisorScreen");
    }

    Task SendMessage() => hubConnection!.SendAsync("SendMessage");

    protected override async Task OnInitializedAsync()
    {
        await TableNameService.GetAll();

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/DailyTableDetailHub")).Build();
        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }



}
