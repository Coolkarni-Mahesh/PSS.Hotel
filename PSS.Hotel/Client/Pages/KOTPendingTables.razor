@layout EmptyLayout
@page "/KOTPendingTables"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject DialogService ds
@inject IDailyTableDetailService DailyTableDetailService

<div id="container">

    <header>
        <_Header Title=@TitleName></_Header>
    </header>

    <article>
        <div id="flex-container" class="myClss">
            @foreach (var item in KotPendingList1)
            {
                <div class="bg-light m-1" style="border: 1px solid">
                    <div style="background-color:#FFCC70">
                        <h6 style="text-align:center; color:black; margin:0px">Table - @item.TableName</h6>
                    </div>

                    <table style="margin:0px" class="table table-bordered border-primary table-sm table-striped">
                        <thead style="background-color:#AFD3E2; color: black;">
                            <tr>
                                <th>Qty</th>
                                <th>Delivered</th>
                                <th>Ready</th>
                                <th>Pending</th>
                                <th>Cancel</th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr style="text-align:center; font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">
                                <td>@item.TotalItemQty</td>
                                <td>@item.DeliveredItemQty</td>
                                <td>@item.ReadyItemQty</td>
                                <td>@item.PendingItemQty</td>
                                <td>@item.CancelItemQty</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </article>

    <footer>
        <_Footer></_Footer>
    </footer>

</div>



@code {
    string TitleName = "Table Status";
    List<KotPendingTableModel> KotPendingList = new List<KotPendingTableModel>();
    List<KotPendingTableModel> KotPendingList1 = new List<KotPendingTableModel>();


    private HubConnection? hubConnection;

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }
    protected async Task LoadData()
    {
        await DailyTableDetailService.GetAll();
        foreach (var item in DailyTableDetailService.DailyTableDetails)
        {
            KotPendingTableModel KOT = new KotPendingTableModel()
                {
                    TableName = item.TableNo.ToString(),
                    TotalItemQty = (int)item.Order!,
                    ReadyItemQty = item.Ready,
                    PendingItemQty = item.Pending,
                    CancelItemQty = (int)item.Cancel!,
                    DeliveredItemQty = item.Delivered
                };
            KotPendingList.Add(KOT);
        }
        var k = from dailyTableDetail in KotPendingList
                group dailyTableDetail by dailyTableDetail.TableName into grouped
                select new
                {
                    TableName = grouped.Key,
                    TotalItemQty = grouped.Sum(item => item.TotalItemQty),
                    CancelItemQty = grouped.Sum(item => item.CancelItemQty),
                    ReadyItemQty = grouped.Sum(item => item.ReadyItemQty),
                    PendingItemQty = grouped.Sum(item => item.PendingItemQty),
                    DeliveredItemQty = grouped.Sum(item => item.DeliveredItemQty)
                };
        foreach (var item in k)
        {

            KotPendingTableModel KOT = new KotPendingTableModel()
                {
                    TableName = item.TableName.ToString(),
                    TotalItemQty = (int)item.TotalItemQty!,
                    ReadyItemQty = item.ReadyItemQty,
                    PendingItemQty = item.PendingItemQty,
                    CancelItemQty = Convert.ToInt32(item.CancelItemQty),
                    DeliveredItemQty = item.DeliveredItemQty
                };
            KotPendingList1.Add(KOT);
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/DailyTabledetailHub")).Build();
        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await LoadData();
    }

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }


}
